/*
 * EclipseMemoryBar.java
 *
 * Created on 29. April 2008, 11:15
 */
package com.semantic.util.swing;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.Rectangle2D;
import javax.swing.Timer;

/**
 *
 * @author  cplonka
 */
public class EclipseMemoryBar extends javax.swing.JPanel implements ActionListener {

    private Runtime r = Runtime.getRuntime();
    /* */
    private Rectangle2D area = new Rectangle2D.Double();
    /**
     * timer for updating the bar
     */
    private Timer timer = new Timer(4000, this);
    /**
     * color of the bar, nice yellow
     */
    private Color rgba = new Color(255, 255, 225);
    /**
     * color of the marker at the end of the bar
     */
    private Color mark = Color.BLACK;
    /**
     *
     */
    private Font font = new Font("SansSerif", Font.PLAIN, 10);

    public EclipseMemoryBar() {
        super();
        //
        initComponents();
        setPreferredSize(new Dimension(10, 10));
        timer.setRepeats(true);
        timer.start();
        //
        addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                r.gc();
                r.runFinalization();
            }
        });
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        Graphics2D g2d = (Graphics2D) g;

        Insets insets = getBorder().getBorderInsets(this);
        area.setRect(insets.left, insets.top, getWidth() - (insets.right + insets.left),
                getHeight() - (insets.bottom + insets.top));
        g2d.setColor(getBackground());
        g2d.fill(area);

        long freeMemory = r.freeMemory();
        long totalMemory = r.totalMemory();
        long max = convertToMeg(r.maxMemory());
        long used_mem = convertToMeg(totalMemory - freeMemory);

        int allocated = (int) totalMemory / 1024;
        int used = (int) (totalMemory - freeMemory) / 1024;
        int draw_x = (int) ((getWidth() * used) / (allocated));

        String text = String.format("Used %sM of %sM", used_mem, convertToMeg(totalMemory));
        FontMetrics fm = getFontMetrics(font);
        Rectangle2D str_area = fm.getStringBounds(text, g);

        area.setRect(insets.left, insets.top, draw_x, getHeight() - (insets.bottom + insets.top));

        if (used_mem >= max - 100) {
            g2d.setColor(Color.RED);
        } else {
            g2d.setColor(rgba);
        }

        g2d.fill(area);
        g2d.setColor(mark);
        g2d.drawLine(draw_x + insets.left, insets.top, draw_x + insets.left,
                getHeight() - (insets.bottom));
        g2d.setFont(font);
        g2d.drawString(text, (int) (getWidth() - str_area.getWidth()) / 2,
                (int) (area.getHeight() + str_area.getHeight()) / 2);

        g.dispose();
    }

    private long convertToMeg(long numBytes) {
        return (numBytes + (512 * 1024)) / (1024 * 1024);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (isVisible()) {
            setToolTipText(String.format("<html><body>Heap size: %sM of total: %sM max: %sM"
                    + "<p>Used Core(s): %s-Core(s)</body></html>",
                    convertToMeg(r.totalMemory() - r.freeMemory()), convertToMeg(r.totalMemory()),
                    convertToMeg(r.maxMemory()), r.availableProcessors()));
            repaint();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, null, new java.awt.Color(204, 204, 204), null, null));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 396, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
